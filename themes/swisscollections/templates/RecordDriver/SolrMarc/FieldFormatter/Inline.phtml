<?php
/**
 * SwissCollections: Inline.phtml
 *
 * PHP version 7
 *
 * Copyright (C) project swissbib, University Library Basel, Switzerland
 * http://www.swisscollections.org  / http://www.swisscollections.ch / http://www.ub.unibas.ch
 *
 * Date: 1/12/20
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * @category SwissCollections_VuFind
 * @package  SwissCollections\templates\RecordDriver\SolrMarc\FieldFormatter
 * @author   Lionel Walter <lionel.walter@unibas.ch>
 * @license  http://opensource.org/licenses/gpl-2.0.php GNU General Public License
 * @link     http://www.swisscollections.org Project Wiki
 */

namespace SwissCollections\templates\RecordDriver\SolrMarc\FieldFormatter;

use SwissCollections\Formatter\FieldFormatter;
use SwissCollections\Formatter\FieldFormatterData;
use SwissCollections\RecordDriver\FieldRenderContext;

/**
 * Render subfield values inline to html.
 *
 * @category SwissCollections_VuFind
 * @package  SwissCollections\templates\RecordDriver\SolrMarc\FieldFormatter
 * @author   Lionel Walter <lionel.walter@unibas.ch>
 * @license  http://opensource.org/licenses/gpl-2.0.php GNU General Public License
 * @link     https://vufind.org/wiki/development Wiki
 */
class Inline extends FieldFormatter
{
    /**
     * Get the formatter's name.
     *
     * @return string
     */
    public function getName(): string
    {
        return "inline";
    }

    /**
     * Render subfields values to html.
     *
     * @param string             $fieldName     the field's name
     * @param FieldFormatterData $fieldDataList the field's values
     * @param FieldRenderContext $context       the render context
     *
     * @return void
     */
    public function render($fieldName, $fieldDataList, $context): void
    {
        echo "\t\t<div class='field-value field-value-compound field-value-"
            . $fieldName . "'>\n";
        foreach ($fieldDataList as $index => $fd) {
            $separator = $this->getSeparator($fd);
            if ($index > 0) {
                echo $separator;
            }
            // echo "\n\t\t\t<!-- marcInfo=" . $fd->renderConfig . " -->\n";
            echo "<span class='field-entry field-entry-"
                . $fd->renderConfig->labelKey . "'>";
            $this->outputValue($fd, $context);
            echo "</span>";
        }
        echo "\n\t\t</div>\n";
    }

    /**
     * Get the configured subfield value separator from the render config.
     *
     * @param FieldFormatterData $fd the field's values and render config
     *
     * @return string
     */
    protected function getSeparator($fd): string
    {
        return $fd->renderConfig->getFormatterConfig()->getSeparator();
    }
}