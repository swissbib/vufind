<!-- <?php use SwissCollections\Formatter\FieldFormatterRegistry;
use SwissCollections\Formatter\FieldGroupFormatterRegistry;
use SwissCollections\Formatter\SubfieldFormatterRegistry;
use SwissCollections\RecordDriver\FieldGroupRenderContext;
use SwissCollections\RenderConfig\AbstractRenderConfigEntry;
use SwissCollections\RenderConfig\FormatterConfig;
use SwissCollections\RenderConfig\RenderGroupConfig;
use SwissCollections\templates\RecordDriver\SolrMarc\FieldFormatter\Inline;
use SwissCollections\templates\RecordDriver\SolrMarc\FieldFormatter\Line;
use SwissCollections\templates\RecordDriver\SolrMarc\FieldGroupFormatter\DefaultFormatter;
use SwissCollections\templates\RecordDriver\SolrMarc\FieldGroupFormatter\SucheinstiegePerson;
use SwissCollections\templates\RecordDriver\SolrMarc\SubfieldFormatter\Date;
use SwissCollections\templates\RecordDriver\SolrMarc\SubfieldFormatter\Simple;
use SwissCollections\templates\RecordDriver\SolrMarc\SubfieldFormatter\SimpleLine;

?>-->
<?php
/**
 * @var SwissCollections\RecordDriver\SolrMarc $record 
 */
$record = $this->driver;
/**
 * @var Swissbib\View\Helper\Record $viewRecord 
*/
$viewRecord = $this->record($record);
/**
 * @var RenderGroupConfig[]
 */
$renderConfig = $record->getRenderConfig();

$id = $record->getUniqueId();
$shortTitle = $record->getShortTitle();
$titleStatement = $record->getTitleStatement(true);
$subtitle = $viewRecord->getSubtitle($titleStatement);
$responsible = $viewRecord->getResponsible($titleStatement, $record);
$publications = $record->getPublicationDetails();
$physicalDescriptions = $record->getPhysicalDescriptions(false);
$edition = $record->getEdition();
$cartMathData = $record->getCartMathData();
$formats = $viewRecord->getFormatList();
$hierarchicalLevel = $record->getHierachicalLevel();
$hostItems = $record->getHostItemEntry();
$journalTitle = $record->getContainerTitle();
$ref = $record->getContainerReference();
$highlightedFulltext = $record->getHighlightedFulltext();

$showFRBR = $this->configAccess()->Site->displayFrbr;
$groupID = $this->driver->getGroup(true);

$urls = $viewRecord->getExtendedLinkDetails();

$nl = null;
if ($searchClassId != "Summon") {
    try {
        $nl = $this->nationalLicences()->getUrl($record);
    } catch (\Exception $e) {
        //this is the case for swissbib orange and jusbib
        $nl = null;
    }
}
if ($nl) {
    $linkNL = ['url' => $nl['url'], 'desc' => "Get it Online (National Licence)"];
    array_push($urls, $linkNL);
}
$link360 = $viewRecord->getLink360();
$linkSFX = $viewRecord->getLinkSFX();

$this->render('RecordDriver/SolrMarc/SubfieldFormatter/Simple');
$this->render('RecordDriver/SolrMarc/SubfieldFormatter/SimpleLine');
$this->render('RecordDriver/SolrMarc/SubfieldFormatter/Date');

$subfieldFormatterRegistry = new SubfieldFormatterRegistry();
$subfieldFormatterRegistry->register(new Simple($this));
$subfieldFormatterRegistry->register(new SimpleLine($this));
$subfieldFormatterRegistry->register(new Date($this));

$this->render('RecordDriver/SolrMarc/FieldFormatter/Inline');
$this->render('RecordDriver/SolrMarc/FieldFormatter/Line');

$fieldFormatterRegistry = new FieldFormatterRegistry();
$fieldFormatterRegistry->register(new Inline($this));
$fieldFormatterRegistry->register(new Line($this));

$this->render('RecordDriver/SolrMarc/FieldGroupFormatter/Default');
$this->render('RecordDriver/SolrMarc/FieldGroupFormatter/SucheinstiegePerson');

$fieldGroupFormatterRegistry = new FieldGroupFormatterRegistry();
$fieldGroupFormatterRegistry->register(new DefaultFormatter($this));
$fieldGroupFormatterRegistry->register(new SucheinstiegePerson($this));
?>
<div class="" vocab="http://schema.org/" resource="#record"
     typeof="<?php echo $this->driver->getSchemaOrgFormats() ?> Product">

    <div style="border-top: 1px solid #bbbbbb; margin-top: 1rem; margin-bottom: 1rem;"></div>
    <?php
    if ($renderConfig) {
        $fieldGroupFormatterContext = new FieldGroupRenderContext($fieldFormatterRegistry, $subfieldFormatterRegistry, $record);
        /**
         * @var RenderGroupConfig $renderGroupConfig
         */
        foreach ($renderConfig as $renderGroupConfig) {
            if (!$renderGroupConfig->isEmpty($record)) {
                $groupName = $renderGroupConfig->getName();
                $groupAnchor = str_replace(' ', '_', $groupName);
                echo "<a name='$groupAnchor'>";
                echo "<h2>" . $this->translate('page.detail.group.label.' . $groupName) . "</h2>";
                echo "</a>";
                // call field group formatter with a sequence of fields having the same name
                $renderGroupEntries = $renderGroupConfig->entries();
                $renderGroupKeys = array_keys($renderGroupEntries);
                $renderGroupEntryCount = count($renderGroupKeys);
                $renderElemIndex = 0;
                while ($renderElemIndex < $renderGroupEntryCount) {
                    $groupMembers = [];
                    /**
                     * @var AbstractRenderConfigEntry $renderElem
                     */
                    $renderElem = $renderGroupEntries[$renderGroupKeys[$renderElemIndex]];
                    $fieldName = $renderElem->fieldName;
                    /**
                     * @var FormatterConfig
                     */
                    $fieldGroupFormatter = $renderElem->getFieldGroupFormatter();
                    if (empty($fieldGroupFormatter)) {
                        $fieldGroupFormatter = new FormatterConfig(DefaultFormatter::$NAME, []);
                    }
                    $isMultiMarcField = $record->isMultiMarcField($groupName, $fieldName);
                    if ($isMultiMarcField) {
                        while ($renderElemIndex < $renderGroupEntryCount) {
                            $renderElem = $renderGroupEntries[$renderGroupKeys[$renderElemIndex]];
                            if ($fieldName !== $renderElem->fieldName) {
                                break;
                            }
                            if (!$renderElem->isEmpty($record)) {
                                $groupMembers[] = $renderElem;
                            }
                            $renderElemIndex++;
                        }
                    } else {
                        if (!$renderElem->isEmpty($record)) {
                            $groupMembers[] = $renderElem;
                        }
                        $renderElemIndex++;
                    }
                    // echo "<!-- GF: $groupName > $fieldName [" . ($isMultiMarcField ? "M" : "S") . "]: " . $fieldGroupFormatter->getFormatterName() . " " . count($groupMembers) . " -->";
                    if (count($groupMembers) > 0) {
                        $fieldGroupFormatterRegistry->applyFormatter(
                            $fieldGroupFormatter,
                            $groupMembers, $fieldGroupFormatterContext
                        );
                    }
                }
                echo "<div style=\"border-top: 1px solid #bbbbbb; margin-top: 1rem; margin-bottom: 1rem;\"></div>";
            }
        }
    }
    ?>
</div>